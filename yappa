//+------------------------------------------------------------------+
//|                                                    MovingAverage.mq5 |
//|                        Copyright 2021, MetaQuotes Software Corp. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+

#include <Tools\DateTime.mqh>
#include <Indicators\Trend.mqh>

input int FastMAPeriod = 5;
input int SlowMAPeriod = 10;
input int RSI_Period = 14;
input ENUM_TIMEFRAMES Timeframe = PERIOD_H1;
input ENUM_APPLIED_PRICE AppliedPrice = PRICE_CLOSE;
input int StartHour = 8;
input int EndHour = 20;

// Add new inputs for StopLoss, TakeProfit, and TrailingStop
input double StopLoss = 10;
input double TakeProfit = 60;
input double TrailingStop = 25;

// Add new inputs for Scalping strategy
input int StopLossPips = 50;
input int TakeProfitPips = 100;
input int MA_Period = 50;

input int BBPeriod = 20;
input double BBDeviation = 2;

input int ATR_Period = 7; // Period for ATR calculation
input double ATR_Factor = 1.2; // Multiplier for ATR to determine breakout points

// Global variables
int FastMAHandle, SlowMAHandle, RSIHandle;
double FastMA[], SlowMA[], RSI[];
CiADX adx;
int BBHandle;
double BBUpper[], BBLower[], BBMiddle[];
int ATRHandle;
double ATR[];
double MinRSI = 100;
double PrevATR = 0;

// Global variables for Scalping strategy
int MA_Handle;
double MA[];
// Add input for Lots
input double Lots = 0.10;

// Remove the global 'shift' variable
// int shift = 0;

// Declare the 'current_hour' variable
datetime current_hour;

// OnInit()
void OnInit()
{
    FastMAHandle = iMA(_Symbol, Timeframe, FastMAPeriod, 0, MODE_EMA, AppliedPrice);
    SlowMAHandle = iMA(_Symbol, Timeframe, SlowMAPeriod, 0, MODE_EMA, AppliedPrice);
    RSIHandle = iRSI(_Symbol, Timeframe, RSI_Period, AppliedPrice);
    // Initialize Moving Average handle for Scalping strategy
    MA_Handle = iMA(_Symbol, PERIOD_M1, MA_Period, 0, MODE_SMA, PRICE_CLOSE);
    BBHandle = iBands(_Symbol, Timeframe, BBPeriod, BBDeviation, 0, PRICE_CLOSE);
    ATRHandle = iATR(_Symbol, Timeframe, ATR_Period);


    if(!adx.Create(_Symbol, Timeframe, 14)) {
        Print("Failed to create ADX indicator.");
        ExpertRemove();
    }
}
// OnTick()
void OnTick()
{
    // Update FastMA, SlowMA, and RSI
    CopyBuffer(FastMAHandle, 0, 0, FastMAPeriod, FastMA);
    CopyBuffer(SlowMAHandle, 0, 0, SlowMAPeriod, SlowMA);
    CopyBuffer(RSIHandle, 0, 0, RSI_Period, RSI);
    CopyBuffer(BBHandle, 0, 0, BBPeriod, BBUpper);
    CopyBuffer(BBHandle, 1, 0, BBPeriod, BBMiddle);
    CopyBuffer(BBHandle, 2, 0, BBPeriod, BBLower);
    CopyBuffer(ATRHandle, 0, 0, ATR_Period, ATR);

    double Bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
    double Ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
    double stopLoss, takeProfit;
    double adx_value = adx.Main(0);
    double plus_di_value = adx.Plus(0);
    double minus_di_value = adx.Minus(0);
    
    // Get the current bar index
    int shift = 0;
   

// Add these variables to track the highest and lowest RSI values within the lookback period
    int RSI_Lookback = 7; // Define the lookback period for RSI
    double HighestRSI = 0;
    double LowestRSI = 1000;

    // Get the available RSI data count
    int availableData = CopyBuffer(RSIHandle, 0, 0, RSI_Period, RSI);
    
    // Check if there's enough data for the lookback period
    if (availableData >= RSI_Lookback + 1)
    {
        // Replace the original logic for updating MinRSI with the following:
        for (int i = 1; i <= RSI_Lookback; i++)
        {
            if (RSI[i] > HighestRSI)
            {
                HighestRSI = RSI[i];
            }
            if (RSI[i] < LowestRSI)
            {
                LowestRSI = RSI[i];
            }
        }
    }

    // Update the previous ATR value
    PrevATR = ATR[1];

    
    // Check for Buy signal
     if (RSI[0] < 30 && adx_value > 20 && Bid < BBLower[0] && (BBLower[0] - Bid) > ATR[0] * ATR_Factor && (RSI[0] > RSI[1] || ATR[0] > ATR[1]) && RSI[0] < LowestRSI)
   
 
    {
        // Adjust RSI condition for breakpoint points
        if (RSI[1] >= 30)
        {
            stopLoss = Bid - double(StopLossPips) * _Point;
            takeProfit = Bid + double(TakeProfitPips) * _Point;
            MqlTradeRequest request;
            MqlTradeResult result;
            ZeroMemory(request);
            request.action = TRADE_ACTION_DEAL;
            request.symbol = _Symbol;
            request.volume = Lots;
            request.type = ORDER_TYPE_BUY;
            request.price = Ask;
            request.sl = stopLoss;
            request.tp = takeProfit;
            request.deviation = 10;
            request.type_filling = ORDER_FILLING_RETURN;

            if (!OrderSend(request, result))
            {
                Print("OrderSend failed with error: ", GetLastError());
            }
        }
    }
    // Check for Sell signal
    else if (RSI[0] > 65 && adx_value > 20 && Ask > BBUpper[0] && (Ask - BBUpper[0]) > ATR[0] * ATR_Factor && RSI[0] > HighestRSI)
    {
        // Adjust RSI condition for breakpoint points
        if (RSI[1] <= 65)
        {
            stopLoss = Ask + StopLossPips * _Point;
            takeProfit = Ask - TakeProfitPips * _Point;
            MqlTradeRequest request;
            MqlTradeResult result;
            ZeroMemory(request);
            request.action = TRADE_ACTION_DEAL;
            request.symbol = _Symbol;
            request.volume = Lots;
            request.type = ORDER_TYPE_SELL;
            request.price = Bid;
            request.sl = stopLoss;
            request.tp = takeProfit;
            request.deviation = 10;
            request.type_filling = ORDER_FILLING_RETURN;

            if (!OrderSend(request, result))
            {
                Print("OrderSend failed with error: ", GetLastError());
            }
        }
    }
// Trailing Stop
for (int i = PositionsTotal() - 1; i >= 0; i--)
{
    ulong ticket = PositionGetTicket(i);
    if (PositionSelectByTicket(ticket))
    {
        double positionOpenPrice = PositionGetDouble(POSITION_PRICE_OPEN);
        double currentPositionProfit = PositionGetDouble(POSITION_PROFIT);

        if (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)
        {
            if (currentPositionProfit > 0 && (Bid - positionOpenPrice) > TrailingStop * _Point)
            {
                double newStopLoss = NormalizeDouble(Bid - TrailingStop * _Point, _Digits);
                if (newStopLoss > PositionGetDouble(POSITION_SL))
                {
                    MqlTradeRequest modifyRequest;
                    MqlTradeResult modifyResult;
                    ZeroMemory(modifyRequest);
                    modifyRequest.action = TRADE_ACTION_SLTP;
                    modifyRequest.symbol = _Symbol;
                    modifyRequest.sl = newStopLoss;
                    modifyRequest.tp = PositionGetDouble(POSITION_TP);
                    modifyRequest.order = ticket;

                    if (!OrderSend(modifyRequest, modifyResult))
                    {
                        Print("OrderModify failed with error: ", GetLastError());
                    }
                }
            }
        }
        else if (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL)
        {
            if (currentPositionProfit > 0 && (positionOpenPrice - Ask) > TrailingStop * _Point)
            {
                double newStopLoss = NormalizeDouble(Ask + TrailingStop * _Point, _Digits);
                if (newStopLoss < PositionGetDouble(POSITION_SL) || PositionGetDouble(POSITION_SL) == 0)
                {
                    MqlTradeRequest modifyRequest;
                    MqlTradeResult modifyResult;
                    ZeroMemory(modifyRequest);
                    modifyRequest.action = TRADE_ACTION_SLTP;
                    modifyRequest.symbol = _Symbol;
                    modifyRequest.sl = newStopLoss;
                    modifyRequest.tp = PositionGetDouble(POSITION_TP);
                    modifyRequest.order = ticket;

                    if (!OrderSend(modifyRequest, modifyResult))
                    {
                        Print("OrderModify failed with error: ", GetLastError());
                    }
                }
            }
        }
    }
}

    // Update 'current_hour' using TimeCurrent()
    current_hour = TimeCurrent();
}

void CloseAllPositions()
{
    for (int i = PositionsTotal() - 1; i >= 0; i--)
    {
        ulong ticket = PositionGetTicket(i);
        if (PositionSelectByTicket(ticket))
        {
            MqlTradeRequest close_request;
            MqlTradeResult close_result;
            ZeroMemory(close_request);
            close_request.action = TRADE_ACTION_DEAL;
            close_request.symbol = _Symbol;
            close_request.volume = PositionGetDouble(POSITION_VOLUME);
            close_request.deviation = 10;

            if (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)
            {
                close_request.type = ORDER_TYPE_SELL;
                close_request.price = SymbolInfoDouble(_Symbol, SYMBOL_BID);
            }
            else if (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL)
            {
                close_request.type = ORDER_TYPE_BUY;
                close_request.price = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
            }

            if(!OrderSend(close_request, close_result)) {
                Print("OrderClose failed with error: ", GetLastError());
            }
        }
    }
}
//+------------------------------------------------------------------+
//| Close all open positions with the same direction                 |
//+------------------------------------------------------------------+
void CloseAllPositionsInDirection(int direction)
{
    for (int i = PositionsTotal() - 1; i >= 0; i--)
    {
        ulong ticket = PositionGetTicket(i);
        if (PositionSelectByTicket(ticket))
        {
            if (PositionGetInteger(POSITION_TYPE) == direction)
            {
                MqlTradeRequest close_request;
                MqlTradeResult close_result;
                ZeroMemory(close_request);
                close_request.action = TRADE_ACTION_DEAL;
                close_request.symbol = _Symbol;
                close_request.volume = PositionGetDouble(POSITION_VOLUME);
                close_request.deviation = 10;

                if (direction == POSITION_TYPE_BUY)
                {
                    close_request.type = ORDER_TYPE_SELL;
                    close_request.price = SymbolInfoDouble(_Symbol, SYMBOL_BID);
                }
                else if (direction == POSITION_TYPE_SELL)
                {
                    close_request.type = ORDER_TYPE_BUY;
                    close_request.price = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
                }

                if (!OrderSend(close_request, close_result))
                {
                    Print("OrderClose failed with error: ", GetLastError());
                }
            }
        }
    }
}
 //+------------------------------------------------------------------+
//| Calculate the position size based on account balance and risk    |
//+------------------------------------------------------------------+```

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double CalculatePositionSize(ENUM_ORDER_TYPE order_type)
  {
   double risk_fraction = 0.01; // Risk 1% of account balance
   double account_balance = AccountInfoDouble(ACCOUNT_BALANCE);
   double risk_amount = account_balance * risk_fraction;
   double stop_loss_pips = StopLoss * _Point;

   double pip_value = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_VALUE);
   double lot_size = risk_amount / (stop_loss_pips * pip_value);

   return NormalizeDouble(lot_size, 2);
  }

//+------------------------------------------------------------------+
//| Calculate the stop loss for the given order type                 |
//+------------------------------------------------------------------+```

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double CalculateStopLoss(ENUM_ORDER_TYPE order_type)
  {
   double current_price = (order_type == ORDER_TYPE_BUY) ? SymbolInfoDouble(_Symbol, SYMBOL_ASK) : SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double stop_loss_level = (order_type == ORDER_TYPE_BUY) ? (current_price - StopLoss * _Point) : (current_price + StopLoss * _Point);

   return stop_loss_level;
  }

//+------------------------------------------------------------------+
//| Calculate the take profit for the given order type               |
//+------------------------------------------------------------------+```

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double CalculateTakeProfit(ENUM_ORDER_TYPE order_type)
  {
   double current_price = (order_type == ORDER_TYPE_BUY) ? SymbolInfoDouble(_Symbol, SYMBOL_ASK) : SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double take_profit_level = (order_type == ORDER_TYPE_BUY) ? (current_price + TakeProfit * _Point) : (current_price - TakeProfit * _Point);

   return take_profit_level;
  }

//+------------------------------------------------------------------+

//+------------------------------------------------------------------+

